{"version":3,"sources":["webpack://emporium/webpack/universalModuleDefinition","webpack://emporium/webpack/bootstrap","webpack://emporium/./node_modules/tslib/tslib.es6.js","webpack://emporium/./node_modules/tsyringe/dist/esm5/reflection-helpers.js","webpack://emporium/./node_modules/tsyringe/dist/esm5/providers/class-provider.js","webpack://emporium/./node_modules/tsyringe/dist/esm5/providers/factory-provider.js","webpack://emporium/./node_modules/tsyringe/dist/esm5/providers/injection-token.js","webpack://emporium/./node_modules/tsyringe/dist/esm5/providers/token-provider.js","webpack://emporium/./node_modules/tsyringe/dist/esm5/providers/value-provider.js","webpack://emporium/./node_modules/tsyringe/dist/esm5/registry.js","webpack://emporium/./node_modules/tsyringe/dist/esm5/dependency-container.js","webpack://emporium/./node_modules/tsyringe/dist/esm5/decorators/auto-injectable.js","webpack://emporium/./node_modules/tsyringe/dist/esm5/decorators/inject.js","webpack://emporium/./node_modules/tsyringe/dist/esm5/decorators/injectable.js","webpack://emporium/./node_modules/tsyringe/dist/esm5/decorators/registry.js","webpack://emporium/./node_modules/tsyringe/dist/esm5/decorators/singleton.js","webpack://emporium/./node_modules/tsyringe/dist/esm5/decorators/inject-all.js","webpack://emporium/./node_modules/tsyringe/dist/esm5/factories/instance-caching-factory.js","webpack://emporium/./node_modules/tsyringe/dist/esm5/factories/predicate-aware-class-factory.js","webpack://emporium/./node_modules/tsyringe/dist/esm5/index.js","webpack://emporium/./src/index.ts","webpack://emporium/./src/adapters/HttpBin.ts","webpack://emporium/external \"rxjs\"","webpack://emporium/./node_modules/async/dist/async.mjs","webpack://emporium/./node_modules/ky/index.js","webpack://emporium/(webpack)/buildin/global.js","webpack://emporium/./src/Emporium.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__3__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","extendStatics","b","setPrototypeOf","__proto__","Array","INJECTION_TOKEN_METADATA_KEY","getParamInfo","target","params","Reflect","getMetadata","injectionTokens","getOwnMetadata","keys","forEach","defineInjectionTokenMetadata","data","_propertyKey","parameterIndex","defineMetadata","isClassProvider","provider","useClass","isFactoryProvider","useFactory","isNormalToken","token","isTokenDescriptor","descriptor","isTokenProvider","useToken","isValueProvider","undefined","useValue","Registry","this","_registryMap","Map","getAll","ensure","length","set","push","has","clear","typeInfo","instance","InternalDependencyContainer","parent","_registry","register","options","singleton","registerType","from","to","registerInstance","registerSingleton","resolve","registration","getRegistration","toString","resolveRegistration","construct","resolveAll","_this","getAllRegistrations","map","item","isRegistered","reset","createChildContainer","ctor","paramInfo","param","multiple","apply","concat","_super","class_1","args","_i","arguments","slice","type","index","e","argIndex","_b","match","split","__","constructor","registrations","_a","indexOf","getOwnPropertySymbols","propertyIsEnumerable","instanceCachingFactory","factoryFunc","dependencyContainer","predicateAwareClassFactory","predicate","trueConstructor","falseConstructor","useCaching","previousPredicate","currentPredicate","Emporium","initEmporium","container","HttpBin","_store","Subject","_queue","queue","task","callback","next","stream","Promise","save","entity","post","find","injectable","fn","callArgs","initialParams","pop","hasSetImmediate","setImmediate","hasNextTick","process","nextTick","fallback","setTimeout","wrap","defer","setImmediate$1","asyncify","func","isAsync","handlePromise","result","then","promise","invokeCallback","err","message","Error","error","wrapAsync","asyncFn","awaitify","arity","awaitable","reject","cbArgs","applyEach","eachfn","fns","that","cb","_asyncMap","arr","iteratee","results","counter","_iteratee","_","iterCb","v","isArrayLike","breakLoop","once","wrapper","callFn","assign","createIterator","coll","len","createArrayIterator","obj","okeys","iterator","getIterator","done","createES2015Iterator","onlyOnce","asyncEachOfLimit","generator","limit","canceled","awaiting","running","idx","replenish","iterDone","iterateeCallback","catch","handleError","eachOfLimit","RangeError","isAsyncGenerator","asyncIterator","isAsyncIterable","nextElem","looping","elem","eachOfLimit$2","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf$1","map$1","applyEach$1","eachOfSeries$1","mapSeries$1","applyEachSeries","PROMISE_SYMBOL","promiseCallback","res","rej","auto","tasks","concurrency","numTasks","runningTasks","hasError","listeners","readyTasks","readyToCheck","uncheckedDependencies","enqueueTask","taskCallback","safeResults","rkey","taskName","processQueue","taskComplete","taskFn","runTask","shift","run","getDependents","isArray","dependencies","remainingDependencies","dependencyName","join","taskListeners","addListener","currentTask","dependent","checkForDeadlocks","FN_ARGS","ARROW_FN_ARGS","FN_ARG_SPLIT","FN_ARG","STRIP_COMMENTS","autoInject","newTasks","fnIsAsync","hasNoDeps","newTask","src","replace","arg","trim","parseParams","taskCb","newArgs","DLL","head","tail","node","prev","newNode","insertBefore","setInitial","insertAfter","removeLink","cur","testFn","curr","dll","worker","payload","_worker","numRunning","workersList","events","drain","saturated","unsaturated","empty","off","event","handler","filter","ev","trigger","processingScheduled","_insert","insertAtFront","rejectOnError","q","started","_tasks","unshift","_createCB","splice","buffer","idle","_maybeDrain","eventMethod","handleAndRemove","on","isProcessing","paused","datum","remove","Math","min","defineProperties","writable","cargo","cargo$1","reduce$1","memo","x","seq","functions","_functions","newargs","nextargs","compose","reverse","mapLimit$1","concatLimit$1","val","mapResults","concat$1","concatSeries$1","constant","ignoredArgs","_createTester","check","getResult","testResult","testPassed","detect$1","bool","detectLimit$1","detectSeries$1","consoleFunc","resultArgs","console","dir","doWhilst$1","test","_fn","_test","truth","doUntil","_withoutIndex","each","eachLimit$2","eachSeries$1","ensureAsync","sync","innerArgs","every$1","everyLimit$1","everySeries$1","filterArray","truthValues","filterGeneric","sort","a","_filter","filter$1","filterLimit$1","filterSeries$1","forever$1","errback","groupByLimit$1","groupBy","groupBySeries","log","mapValuesLimit$1","newObj","mapValues","mapValuesSeries","memoize","hasher","queues","memoized","unmemoized","_parallel","parallel","parallelLimit","queue$1","items","Heap","heap","pushCount","Number","MIN_SAFE_INTEGER","smaller","percUp","top","percDown","j","y","priority","priorityQueue","race$1","TypeError","reduceRight","array","reversed","reflect","reflectCallback","retVal","reflectAll","reject$2","rejectLimit$1","rejectSeries$1","constant$1","DEFAULT_TIMES","DEFAULT_INTERVAL","retry","opts","times","intervalFunc","acc","interval","errorFilter","parseTimes","_task","attempt","retryAttempt","retryable","series","some$1","Boolean","someLimit$1","someSeries$1","sortBy$1","criteria","comparator","left","right","timeout","milliseconds","info","timer","timedOut","clearTimeout","code","timesLimit","count","size","range","timesSeries","transform","accumulator","k","tryEach$1","unmemoize","whilst$1","rest","until","waterfall$1","taskIndex","nextTask","cargoQueue","concatLimit","concatSeries","detect","detectLimit","detectSeries","doWhilst","eachLimit","eachOf","eachOfSeries","eachSeries","every","everyLimit","everySeries","filterLimit","filterSeries","forever","groupByLimit","mapLimit","mapSeries","mapValuesLimit","race","reduce","rejectLimit","rejectSeries","some","someLimit","someSeries","sortBy","tryEach","waterfall","whilst","all","allLimit","allSeries","any","anyLimit","anySeries","findLimit","findSeries","flatMap","flatMapLimit","flatMapSeries","forEachSeries","forEachLimit","forEachOf","forEachOfSeries","forEachOfLimit","inject","foldl","foldr","select","selectLimit","selectSeries","wrapSync","during","doDuring","globals","getGlobal","self","global","globalThis","globalProperty","globalProperties","props","isObject","supportsAbortController","AbortController","supportsStreams","ReadableStream","supportsFormData","FormData","deepMerge","sources","returnValue","source","entries","requestMethods","responseTypes","json","text","formData","arrayBuffer","blob","retryMethods","Set","retryStatusCodes","retryAfterStatusCodes","HTTPError","response","super","statusText","TimeoutError","safeTimeout","ms","delay","abortController","timeoutID","abort","normalizeRequestMethod","input","includes","toUpperCase","defaultRetryOptions","methods","statusCodes","afterStatusCodes","normalizeRetryOptions","Ky","hooks","throwHttpErrors","searchParams","otherOptions","_retryCount","_options","method","credentials","Request","_input","headers","body","URL","String","prefixUrl","startsWith","endsWith","url","document","baseURI","URLSearchParams","search","values","signal","addEventListener","_timeout","_hooks","beforeRequest","beforeRetry","afterResponse","_throwHttpErrors","Headers","JSON","stringify","async","_fetch","hook","modifiedResponse","clone","Response","ok","onDownloadProgress","_stream","toLowerCase","_retry","mimeType","status","retryAfter","after","isNaN","Date","parse","now","maxRetryAfter","_calculateRetryDelay","fetch","totalBytes","transferredBytes","controller","reader","getReader","percent","Uint8Array","read","close","byteLength","enqueue","validateAndMerge","createInstance","defaults","ky","newDefaults","extend","g","Function","connection","model","repo","_getRepo","_connection","_model","getRepository","_entityRepo","autoInjectable"],"mappings":"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","file":"emporium.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"rxjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"rxjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"emporium\"] = factory(require(\"rxjs\"));\n\telse\n\t\troot[\"emporium\"] = factory(root[\"rxjs\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__3__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export var INJECTION_TOKEN_METADATA_KEY = \"injectionTokens\";\nexport function getParamInfo(target) {\n    var params = Reflect.getMetadata(\"design:paramtypes\", target) || [];\n    var injectionTokens = Reflect.getOwnMetadata(INJECTION_TOKEN_METADATA_KEY, target) || {};\n    Object.keys(injectionTokens).forEach(function (key) {\n        params[+key] = injectionTokens[key];\n    });\n    return params;\n}\nexport function defineInjectionTokenMetadata(data) {\n    return function (target, _propertyKey, parameterIndex) {\n        var injectionTokens = Reflect.getOwnMetadata(INJECTION_TOKEN_METADATA_KEY, target) || {};\n        injectionTokens[parameterIndex] = data;\n        Reflect.defineMetadata(INJECTION_TOKEN_METADATA_KEY, injectionTokens, target);\n    };\n}\n","export function isClassProvider(provider) {\n    return !!provider.useClass;\n}\n","export function isFactoryProvider(provider) {\n    return !!provider.useFactory;\n}\n","export function isNormalToken(token) {\n    return typeof token === \"string\" || typeof token === \"symbol\";\n}\nexport function isTokenDescriptor(descriptor) {\n    return (typeof descriptor === \"object\" &&\n        \"token\" in descriptor &&\n        \"multiple\" in descriptor);\n}\n","export function isTokenProvider(provider) {\n    return !!provider.useToken;\n}\n","export function isValueProvider(provider) {\n    return provider.useValue != undefined;\n}\n","var Registry = (function () {\n    function Registry() {\n        this._registryMap = new Map();\n    }\n    Registry.prototype.getAll = function (key) {\n        this.ensure(key);\n        return this._registryMap.get(key);\n    };\n    Registry.prototype.get = function (key) {\n        this.ensure(key);\n        var value = this._registryMap.get(key);\n        return value[value.length - 1] || null;\n    };\n    Registry.prototype.set = function (key, value) {\n        this.ensure(key);\n        this._registryMap.get(key).push(value);\n    };\n    Registry.prototype.has = function (key) {\n        this.ensure(key);\n        return this._registryMap.get(key).length > 0;\n    };\n    Registry.prototype.clear = function () {\n        this._registryMap.clear();\n    };\n    Registry.prototype.ensure = function (key) {\n        if (!this._registryMap.has(key)) {\n            this._registryMap.set(key, []);\n        }\n    };\n    return Registry;\n}());\nexport default Registry;\n","import { isClassProvider, isFactoryProvider, isNormalToken, isTokenProvider, isValueProvider } from \"./providers\";\nimport { isTokenDescriptor } from \"./providers/injection-token\";\nimport Registry from \"./registry\";\nexport var typeInfo = new Map();\nvar InternalDependencyContainer = (function () {\n    function InternalDependencyContainer(parent) {\n        this.parent = parent;\n        this._registry = new Registry();\n    }\n    InternalDependencyContainer.prototype.register = function (token, provider, options) {\n        if (options === void 0) { options = { singleton: false }; }\n        if (options.singleton) {\n            if (isValueProvider(provider) || isFactoryProvider(provider)) {\n                throw \"Cannot use {singleton: true} with ValueProviders or FactoryProviders\";\n            }\n        }\n        this._registry.set(token, { provider: provider, options: options });\n        return this;\n    };\n    InternalDependencyContainer.prototype.registerType = function (from, to) {\n        if (isNormalToken(to)) {\n            return this.register(from, {\n                useToken: to\n            });\n        }\n        return this.register(from, {\n            useClass: to\n        });\n    };\n    InternalDependencyContainer.prototype.registerInstance = function (token, instance) {\n        return this.register(token, {\n            useValue: instance\n        });\n    };\n    InternalDependencyContainer.prototype.registerSingleton = function (from, to) {\n        if (isNormalToken(from)) {\n            if (isNormalToken(to)) {\n                return this.register(from, {\n                    useToken: to\n                }, { singleton: true });\n            }\n            else if (to) {\n                return this.register(from, {\n                    useClass: to\n                }, { singleton: true });\n            }\n            throw \"Cannot register a type name as a singleton without a \\\"to\\\" token\";\n        }\n        var useClass = from;\n        if (to && !isNormalToken(to)) {\n            useClass = to;\n        }\n        return this.register(from, {\n            useClass: useClass\n        }, { singleton: true });\n    };\n    InternalDependencyContainer.prototype.resolve = function (token) {\n        var registration = this.getRegistration(token);\n        if (!registration && isNormalToken(token)) {\n            throw \"Attempted to resolve unregistered dependency token: \" + token.toString();\n        }\n        if (registration) {\n            return this.resolveRegistration(registration);\n        }\n        return this.construct(token);\n    };\n    InternalDependencyContainer.prototype.resolveRegistration = function (registration) {\n        if (isValueProvider(registration.provider)) {\n            return registration.provider.useValue;\n        }\n        else if (isTokenProvider(registration.provider)) {\n            return registration.options.singleton\n                ? registration.instance ||\n                    (registration.instance = this.resolve(registration.provider.useToken))\n                : this.resolve(registration.provider.useToken);\n        }\n        else if (isClassProvider(registration.provider)) {\n            return registration.options.singleton\n                ? registration.instance ||\n                    (registration.instance = this.construct(registration.provider.useClass))\n                : this.construct(registration.provider.useClass);\n        }\n        else if (isFactoryProvider(registration.provider)) {\n            return registration.provider.useFactory(this);\n        }\n        else {\n            return this.construct(registration.provider);\n        }\n    };\n    InternalDependencyContainer.prototype.resolveAll = function (token) {\n        var _this = this;\n        var registration = this.getAllRegistrations(token);\n        if (!registration && isNormalToken(token)) {\n            throw \"Attempted to resolve unregistered dependency token: \" + token.toString();\n        }\n        if (registration) {\n            return registration.map(function (item) { return _this.resolveRegistration(item); });\n        }\n        return [this.construct(token)];\n    };\n    InternalDependencyContainer.prototype.isRegistered = function (token) {\n        return this._registry.has(token);\n    };\n    InternalDependencyContainer.prototype.reset = function () {\n        this._registry.clear();\n    };\n    InternalDependencyContainer.prototype.createChildContainer = function () {\n        return new InternalDependencyContainer(this);\n    };\n    InternalDependencyContainer.prototype.getRegistration = function (token) {\n        if (this.isRegistered(token)) {\n            return this._registry.get(token);\n        }\n        if (this.parent) {\n            return this.parent.getRegistration(token);\n        }\n        return null;\n    };\n    InternalDependencyContainer.prototype.getAllRegistrations = function (token) {\n        if (this.isRegistered(token)) {\n            return this._registry.getAll(token);\n        }\n        if (this.parent) {\n            return this.parent.getAllRegistrations(token);\n        }\n        return null;\n    };\n    InternalDependencyContainer.prototype.construct = function (ctor) {\n        var _this = this;\n        if (ctor.length === 0) {\n            return new ctor();\n        }\n        var paramInfo = typeInfo.get(ctor);\n        if (!paramInfo || paramInfo.length === 0) {\n            throw \"TypeInfo not known for \" + ctor;\n        }\n        var params = paramInfo.map(function (param) {\n            if (isTokenDescriptor(param)) {\n                return param.multiple\n                    ? _this.resolveAll(param.token)\n                    : _this.resolve(param.token);\n            }\n            return _this.resolve(param);\n        });\n        return new (ctor.bind.apply(ctor, [void 0].concat(params)))();\n    };\n    return InternalDependencyContainer;\n}());\nexport var instance = new InternalDependencyContainer();\nexport default instance;\n","import * as tslib_1 from \"tslib\";\nimport { getParamInfo } from \"../reflection-helpers\";\nimport { instance as globalContainer } from \"../dependency-container\";\nimport { isTokenDescriptor } from \"../providers/injection-token\";\nfunction autoInjectable() {\n    return function (target) {\n        var paramInfo = getParamInfo(target);\n        return (function (_super) {\n            tslib_1.__extends(class_1, _super);\n            function class_1() {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                return _super.apply(this, args.concat(paramInfo.slice(args.length).map(function (type, index) {\n                    try {\n                        if (isTokenDescriptor(type)) {\n                            return type.multiple\n                                ? globalContainer.resolveAll(type.token)\n                                : globalContainer.resolve(type.token);\n                        }\n                        return globalContainer.resolve(type);\n                    }\n                    catch (e) {\n                        var argIndex = index + args.length;\n                        var _a = target.toString().match(/constructor\\(([\\w, ]+)\\)/) || [], _b = _a[1], params = _b === void 0 ? null : _b;\n                        var argName = params\n                            ? params.split(\",\")[argIndex]\n                            : \"#\" + argIndex;\n                        throw \"Cannot inject the dependency \" + argName + \" of \" + target.name + \" constructor. \" + e;\n                    }\n                }))) || this;\n            }\n            return class_1;\n        }(target));\n    };\n}\nexport default autoInjectable;\n","import { defineInjectionTokenMetadata } from \"../reflection-helpers\";\nfunction inject(token) {\n    return defineInjectionTokenMetadata(token);\n}\nexport default inject;\n","import { getParamInfo } from \"../reflection-helpers\";\nimport { typeInfo } from \"../dependency-container\";\nfunction injectable() {\n    return function (target) {\n        typeInfo.set(target, getParamInfo(target));\n    };\n}\nexport default injectable;\n","import * as tslib_1 from \"tslib\";\nimport { instance as globalContainer } from \"../dependency-container\";\nfunction registry(registrations) {\n    if (registrations === void 0) { registrations = []; }\n    return function (target) {\n        registrations.forEach(function (_a) {\n            var token = _a.token, options = _a.options, provider = tslib_1.__rest(_a, [\"token\", \"options\"]);\n            return globalContainer.register(token, provider, options);\n        });\n        return target;\n    };\n}\nexport default registry;\n","import injectable from \"./injectable\";\nimport { instance as globalContainer } from \"../dependency-container\";\nfunction singleton() {\n    return function (target) {\n        injectable()(target);\n        globalContainer.registerSingleton(target);\n    };\n}\nexport default singleton;\n","import { defineInjectionTokenMetadata } from \"../reflection-helpers\";\nfunction injectAll(token) {\n    var data = { token: token, multiple: true };\n    return defineInjectionTokenMetadata(data);\n}\nexport default injectAll;\n","export default function instanceCachingFactory(factoryFunc) {\n    var instance;\n    return function (dependencyContainer) {\n        if (instance == undefined) {\n            instance = factoryFunc(dependencyContainer);\n        }\n        return instance;\n    };\n}\n","export default function predicateAwareClassFactory(predicate, trueConstructor, falseConstructor, useCaching) {\n    if (useCaching === void 0) { useCaching = true; }\n    var instance;\n    var previousPredicate;\n    return function (dependencyContainer) {\n        var currentPredicate = predicate(dependencyContainer);\n        if (!useCaching || previousPredicate !== currentPredicate) {\n            if ((previousPredicate = currentPredicate)) {\n                instance = dependencyContainer.resolve(trueConstructor);\n            }\n            else {\n                instance = dependencyContainer.resolve(falseConstructor);\n            }\n        }\n        return instance;\n    };\n}\n","if (typeof Reflect === \"undefined\" || !Reflect.getMetadata) {\n    throw \"tsyringe requires a reflect polyfill. Please add 'import \\\"reflect-metadata\\\"' to the top of your entry point.\";\n}\nexport * from \"./decorators\";\nexport * from \"./factories\";\nexport * from \"./providers\";\nexport { instance as container } from \"./dependency-container\";\n","import { container } from \"tsyringe\";\nimport { HttpBin } from \"./adapters/HttpBin\";\nimport { Emporium } from \"./Emporium\";\n\nconst initEmporium = () => {\n    container.register(\"IRepository\", {\n        useClass: HttpBin\n    });\n};\n\nexport { initEmporium, Emporium };\n\n\n","import { singleton, injectable } from \"tsyringe\";\nimport { Subject } from \"rxjs\";\nimport { AsyncQueue, queue } from \"async\";\nimport ky from \"ky\";\nimport { IRepository } from \"../interfaces/IRepository\";\n\n@injectable()\n@singleton()\nexport class HttpBin<T> implements IRepository<T> {\n    private _store: Subject<T> = new Subject();\n    // probably replace this queue with bottleneck package\n    // then store each queued task by id in localforage\n    private _queue: AsyncQueue<T> = queue(\n        (task: T, callback: () => void) => {\n            this._store.next(task);\n            callback();\n        }, 2);\n\n    save(entity: T) {\n        this._queue.push(entity,\n            () => ky.post('https://httpbin.org/post'));\n        return Promise.resolve(entity);\n    }\n\n    find() {\n        return Promise.resolve([]);\n    }\n\n    stream = () => Promise.resolve(this._store);\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nfunction apply(fn, ...args) {\n    return (...callArgs) => fn(...args,...callArgs);\n}\n\nfunction initialParams (fn) {\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n}\n\n/* istanbul ignore file */\n\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    if (isAsync(func)) {\n        return function (...args/*, callback*/) {\n            const callback = args.pop();\n            const promise = func.apply(this, args);\n            return handlePromise(promise, callback)\n        }\n    }\n\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback)\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        setImmediate$1(e => { throw e }, err);\n    }\n}\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function')\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\n// conditionally promisify a function.\n// only return a promise if a callback is omitted\nfunction awaitify (asyncFn, arity = asyncFn.length) {\n    if (!arity) throw new Error('arity is undefined')\n    function awaitable (...args) {\n        if (typeof args[arity - 1] === 'function') {\n            return asyncFn.apply(this, args)\n        }\n\n        return new Promise((resolve, reject) => {\n            args[arity - 1] = (err, ...cbArgs) => {\n                if (err) return reject(err)\n                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n            };\n            asyncFn.apply(this, args);\n        })\n    }\n\n    Object.defineProperty(awaitable, 'name', {\n        value: `awaitable(${asyncFn.name})`\n    });\n\n    return awaitable\n}\n\nfunction applyEach (eachfn) {\n    return function applyEach(fns, ...callArgs) {\n        const go = awaitify(function (callback) {\n            var that = this;\n            return eachfn(fns, (fn, cb) => {\n                wrapAsync(fn).apply(that, callArgs.concat(cb));\n            }, callback);\n        });\n        return go;\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    return eachfn(arr, (value, _, iterCb) => {\n        var index = counter++;\n        _iteratee(value, (err, v) => {\n            results[index] = v;\n            iterCb(err);\n        });\n    }, err => {\n        callback(err, results);\n    });\n}\n\nfunction isArrayLike(value) {\n    return value &&\n        typeof value.length === 'number' &&\n        value.length >= 0 &&\n        value.length % 1 === 0;\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nconst breakLoop = {};\n\nfunction once(fn) {\n    function wrapper (...args) {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper\n}\n\nfunction getIterator (coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        return i < len ? {value: obj[key], key} : null;\n    };\n}\n\nfunction createIterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\n\n// for async generators\nfunction asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n\n    function replenish() {\n        //console.log('replenish')\n        if (running >= limit || awaiting || done) return\n        //console.log('replenish awaiting')\n        awaiting = true;\n        generator.next().then(({value, done: iterDone}) => {\n            //console.log('got value', value)\n            if (canceled || done) return\n            awaiting = false;\n            if (iterDone) {\n                done = true;\n                if (running <= 0) {\n                    //console.log('done nextCb')\n                    callback(null);\n                }\n                return;\n            }\n            running++;\n            iteratee(value, idx, iterateeCallback);\n            idx++;\n            replenish();\n        }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n        //console.log('iterateeCallback')\n        running -= 1;\n        if (canceled) return\n        if (err) return handleError(err)\n\n        if (err === false) {\n            done = true;\n            canceled = true;\n            return\n        }\n\n        if (result === breakLoop || (done && running <= 0)) {\n            done = true;\n            //console.log('done iterCb')\n            return callback(null);\n        }\n        replenish();\n    }\n\n    function handleError(err) {\n        if (canceled) return\n        awaiting = false;\n        done = true;\n        callback(err);\n    }\n\n    replenish();\n}\n\nvar eachOfLimit = (limit) => {\n    return (obj, iteratee, callback) => {\n        callback = once(callback);\n        if (limit <= 0) {\n            throw new RangeError('concurrency limit cannot be less than 1')\n        }\n        if (!obj) {\n            return callback(null);\n        }\n        if (isAsyncGenerator(obj)) {\n            return asyncEachOfLimit(obj, limit, iteratee, callback)\n        }\n        if (isAsyncIterable(obj)) {\n            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n        }\n        var nextElem = createIterator(obj);\n        var done = false;\n        var canceled = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            if (canceled) return\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (err === false) {\n                done = true;\n                canceled = true;\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n};\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback);\n    var index = 0,\n        completed = 0,\n        {length} = coll,\n        canceled = false;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err === false) {\n            canceled = true;\n        }\n        if (canceled === true) return\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nfunction eachOfGeneric (coll, iteratee, callback) {\n    return eachOfLimit$2(coll, Infinity, iteratee, callback);\n}\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n * var configs = {};\n *\n * async.forEachOf(obj, function (value, key, callback) {\n *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n *         if (err) return callback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }, function (err) {\n *     if (err) console.error(err.message);\n *     // configs is now a map of JSON data\n *     doSomethingWith(configs);\n * });\n */\nfunction eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOf$1 = awaitify(eachOf, 3);\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callback\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n *     // results is now an array of stats for each file\n * });\n */\nfunction map (coll, iteratee, callback) {\n    return _asyncMap(eachOf$1, coll, iteratee, callback)\n}\nvar map$1 = awaitify(map, 3);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional. The results\n * for each of the applied async functions are passed to the final callback\n * as an array.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - Returns a function that takes no args other than\n * an optional callback, that is the result of applying the `args` to each\n * of the functions.\n * @example\n *\n * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n *\n * appliedFn((err, results) => {\n *     // results[0] is the results for `enableSearch`\n *     // results[1] is the results for `updateSchema`\n * });\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n *     callback\n * );\n */\nvar applyEach$1 = applyEach(map$1);\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfSeries(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, 1, iteratee, callback)\n}\nvar eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapSeries (coll, iteratee, callback) {\n    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n}\nvar mapSeries$1 = awaitify(mapSeries, 3);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - A function, that when called, is the result of\n * appling the `args` to the list of functions.  It takes no args, other than\n * a callback.\n */\nvar applyEachSeries = applyEach(mapSeries$1);\n\nconst PROMISE_SYMBOL = Symbol('promiseCallback');\n\nfunction promiseCallback () {\n    let resolve, reject;\n    function callback (err, ...args) {\n        if (err) return reject(err)\n        resolve(args.length > 1 ? args : args[0]);\n    }\n\n    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n        resolve = res,\n        reject = rej;\n    });\n\n    return callback\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n * @example\n *\n * async.auto({\n *     // this function will just be passed a callback\n *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n *     showData: ['readData', function(results, cb) {\n *         // results.readData is the file's contents\n *         // ...\n *     }]\n * }, callback);\n *\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         console.log('in write_file', JSON.stringify(results));\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         console.log('in email_link', JSON.stringify(results));\n *         // once the file is written let's email a link to it...\n *         // results.write_file contains the filename returned by write_file.\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('results = ', results);\n * });\n */\nfunction auto(tasks, concurrency, callback) {\n    if (typeof concurrency !== 'number') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || promiseCallback());\n    var numTasks = Object.keys(tasks).length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var canceled = false;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    Object.keys(tasks).forEach(key => {\n        var task = tasks[key];\n        if (!Array.isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        dependencies.forEach(dependencyName => {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, () => {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(() => runTask(key, task));\n    }\n\n    function processQueue() {\n        if (canceled) return\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        taskListeners.forEach(fn => fn());\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce((err, ...result) => {\n            runningTasks--;\n            if (err === false) {\n                canceled = true;\n                return\n            }\n            if (result.length < 2) {\n                [result] = result;\n            }\n            if (err) {\n                var safeResults = {};\n                Object.keys(results).forEach(rkey => {\n                    safeResults[rkey] = results[rkey];\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n                if (canceled) return\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            getDependents(currentTask).forEach(dependent => {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        Object.keys(tasks).forEach(key => {\n            const task = tasks[key];\n            if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n\n    return callback[PROMISE_SYMBOL]\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\nvar ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\nfunction parseParams(func) {\n    const src = func.toString().replace(STRIP_COMMENTS, '');\n    let match = src.match(FN_ARGS);\n    if (!match) {\n        match = src.match(ARROW_FN_ARGS);\n    }\n    if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n    let [, args] = match;\n    return args\n        .replace(/\\s/g, '')\n        .split(FN_ARG_SPLIT)\n        .map((arg) => arg.replace(FN_ARG, '').trim());\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    Object.keys(tasks).forEach(key => {\n        var taskFn = tasks[key];\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (Array.isArray(taskFn)) {\n            params = [...taskFn];\n            taskFn = params.pop();\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = params.map(name => results[name]);\n            newArgs.push(taskCb);\n            wrapAsync(taskFn)(...newArgs);\n        }\n    });\n\n    return auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;\n        else this.head = node.next;\n        if (node.next) node.next.prev = node.prev;\n        else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty () {\n        while(this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;\n        else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;\n        else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);\n        else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);\n        else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this]\n    }\n\n    *[Symbol.iterator] () {\n        var cur = this.head;\n        while (cur) {\n            yield cur.data;\n            cur = cur.next;\n        }\n    }\n\n    remove (testFn) {\n        var curr = this.head;\n        while(curr) {\n            var {next} = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new RangeError('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n        error: [],\n        drain: [],\n        saturated: [],\n        unsaturated: [],\n        empty: []\n    };\n\n    function on (event, handler) {\n        events[event].push(handler);\n    }\n\n    function once (event, handler) {\n        const handleAndRemove = (...args) => {\n            off(event, handleAndRemove);\n            handler(...args);\n        };\n        events[event].push(handleAndRemove);\n    }\n\n    function off (event, handler) {\n        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n        if (!handler) return events[event] = []\n        events[event] = events[event].filter(ev => ev !== handler);\n    }\n\n    function trigger (event, ...args) {\n        events[event].forEach(handler => handler(...args));\n    }\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n\n        var res, rej;\n        function promiseCallback (err, ...args) {\n            // we don't care about the error, let the global error handler\n            // deal with it\n            if (err) return rejectOnError ? rej(err) : res()\n            if (args.length <= 1) return res(args[0])\n            res(args);\n        }\n\n        var item = {\n            data,\n            callback: rejectOnError ?\n                promiseCallback :\n                (callback || promiseCallback)\n        };\n\n        if (insertAtFront) {\n            q._tasks.unshift(item);\n        } else {\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n\n        if (rejectOnError || !callback) {\n            return new Promise((resolve, reject) => {\n                res = resolve;\n                rej = reject;\n            })\n        }\n    }\n\n    function _createCB(tasks) {\n        return function (err, ...args) {\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = workersList.indexOf(task);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback(err, ...args);\n\n                if (err != null) {\n                    trigger('error', err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                trigger('unsaturated');\n            }\n\n            if (q.idle()) {\n                trigger('drain');\n            }\n            q.process();\n        };\n    }\n\n    function _maybeDrain(data) {\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            setImmediate$1(() => trigger('drain'));\n            return true\n        }\n        return false\n    }\n\n    const eventMethod = (name) => (handler) => {\n        if (!handler) {\n            return new Promise((resolve, reject) => {\n                once(name, (err, data) => {\n                    if (err) return reject(err)\n                    resolve(data);\n                });\n            })\n        }\n        off(name);\n        on(name, handler);\n\n    };\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        *[Symbol.iterator] () {\n            yield* q._tasks[Symbol.iterator]();\n        },\n        concurrency,\n        payload,\n        buffer: concurrency / 4,\n        started: false,\n        paused: false,\n        push (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, false, callback))\n            }\n            return _insert(data, false, false, callback);\n        },\n        pushAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, true, callback))\n            }\n            return _insert(data, false, true, callback);\n        },\n        kill () {\n            off();\n            q._tasks.empty();\n        },\n        unshift (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, false, callback))\n            }\n            return _insert(data, true, false, callback);\n        },\n        unshiftAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, true, callback))\n            }\n            return _insert(data, true, true, callback);\n        },\n        remove (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    trigger('empty');\n                }\n\n                if (numRunning === q.concurrency) {\n                    trigger('saturated');\n                }\n\n                var cb = onlyOnce(_createCB(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length () {\n            return q._tasks.length;\n        },\n        running () {\n            return numRunning;\n        },\n        workersList () {\n            return workersList;\n        },\n        idle() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause () {\n            q.paused = true;\n        },\n        resume () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n        saturated: {\n            writable: false,\n            value: eventMethod('saturated')\n        },\n        unsaturated: {\n            writable: false,\n            value: eventMethod('unsaturated')\n        },\n        empty: {\n            writable: false,\n            value: eventMethod('empty')\n        },\n        drain: {\n            writable: false,\n            value: eventMethod('drain')\n        },\n        error: {\n            writable: false,\n            value: eventMethod('error')\n        },\n    });\n    return q;\n}\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * await cargo.push({name: 'baz'});\n * console.log('finished processing baz');\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n * If the all `workers` are in progress, the task is queued until one becomes available. Once\n * a `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n * the cargoQueue passes an array of tasks to multiple parallel workers.\n *\n * @name cargoQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @see [async.cargo]{@link module:ControlFLow.cargo}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.CargoObject} A cargoQueue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargoQueue and inner queue.\n * @example\n *\n * // create a cargoQueue object with payload 2 and concurrency 2\n * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2, 2);\n *\n * // add some items\n * cargoQueue.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargoQueue.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargoQueue.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n * cargoQueue.push({name: 'boo'}, function(err) {\n *     console.log('finished processing boo');\n * });\n */\nfunction cargo$1(worker, concurrency, payload) {\n    return queue(worker, concurrency, payload);\n}\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.reduce([1,2,3], 0, function(memo, item, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         callback(null, memo + item)\n *     });\n * }, function(err, result) {\n *     // result is now equal to the last value of memo, which is 6\n * });\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback);\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfSeries$1(coll, (x, i, iterCb) => {\n        _iteratee(memo, x, (err, v) => {\n            memo = v;\n            iterCb(err);\n        });\n    }, err => callback(err, memo));\n}\nvar reduce$1 = awaitify(reduce, 4);\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(...functions) {\n    var _functions = functions.map(wrapAsync);\n    return function (...args) {\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = promiseCallback();\n        }\n\n        reduce$1(_functions, args, (newargs, fn, iterCb) => {\n            fn.apply(that, newargs.concat((err, ...nextargs) => {\n                iterCb(err, nextargs);\n            }));\n        },\n        (err, results) => cb(err, ...results));\n\n        return cb[PROMISE_SYMBOL]\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * If the last argument to the composed function is not a function, a promise\n * is returned when you call it.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nfunction compose(...args) {\n    return seq(...args.reverse());\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapLimit (coll, limit, iteratee, callback) {\n    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar mapLimit$1 = awaitify(mapLimit, 4);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapLimit\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, ...args) => {\n            if (err) return iterCb(err);\n            return iterCb(err, args);\n        });\n    }, (err, mapResults) => {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = result.concat(...mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n}\nvar concatLimit$1 = awaitify(concatLimit, 4);\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. The results array will be returned in\n * the original order of `coll` passed to the `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @alias flatMap\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\n *     // files is now a list of filenames that exist in the 3 directories\n * });\n */\nfunction concat(coll, iteratee, callback) {\n    return concatLimit$1(coll, Infinity, iteratee, callback)\n}\nvar concat$1 = awaitify(concat, 3);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapSeries\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatSeries(coll, iteratee, callback) {\n    return concatLimit$1(coll, 1, iteratee, callback)\n}\nvar concatSeries$1 = awaitify(concatSeries, 3);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nfunction constant(...args) {\n    return function (...ignoredArgs/*, callback*/) {\n        var callback = ignoredArgs.pop();\n        return callback(null, ...args);\n    };\n}\n\nfunction _createTester(check, getResult) {\n    return (eachfn, arr, _iteratee, cb) => {\n        var testPassed = false;\n        var testResult;\n        const iteratee = wrapAsync(_iteratee);\n        eachfn(arr, (value, _, callback) => {\n            iteratee(value, (err, result) => {\n                if (err || err === false) return callback(err);\n\n                if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    return callback(null, breakLoop);\n                }\n                callback();\n            });\n        }, err => {\n            if (err) return cb(err);\n            cb(null, testPassed ? testResult : getResult(false));\n        });\n    };\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * async.detect(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // result now equals the first file in the list that exists\n * });\n */\nfunction detect(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n}\nvar detect$1 = awaitify(detect, 3);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar detectLimit$1 = awaitify(detectLimit, 4);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectSeries(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)\n}\n\nvar detectSeries$1 = awaitify(detectSeries, 3);\n\nfunction consoleFunc(name) {\n    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n        if (typeof console === 'object') {\n            if (err) {\n                if (console.error) {\n                    console.error(err);\n                }\n            } else if (console[name]) {\n                resultArgs.forEach(x => console[name](x));\n            }\n        }\n    })\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results;\n\n    function next(err, ...args) {\n        if (err) return callback(err);\n        if (err === false) return;\n        results = args;\n        _test(...args, check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return check(null, true);\n}\n\nvar doWhilst$1 = awaitify(doWhilst, 3);\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doUntil(iteratee, test, callback) {\n    const _test = wrapAsync(test);\n    return doWhilst$1(iteratee, (...args) => {\n        const cb = args.pop();\n        _test(...args, (err, truth) => cb (err, !truth));\n    }, callback);\n}\n\nfunction _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // assuming openFiles is an array of file names and saveFile is a function\n * // to save the modified contents of that file:\n *\n * async.each(openFiles, saveFile, function(err){\n *   // if any of the saves produced an error, err would equal that error\n * });\n *\n * // assuming openFiles is an array of file names\n * async.each(openFiles, function(file, callback) {\n *\n *     // Perform operation on file here.\n *     console.log('Processing file ' + file);\n *\n *     if( file.length > 32 ) {\n *       console.log('This file name is too long');\n *       callback('File name too long');\n *     } else {\n *       // Do work to process file here\n *       console.log('File processed');\n *       callback();\n *     }\n * }, function(err) {\n *     // if any of the file processing produced an error, err would equal that error\n *     if( err ) {\n *       // One of the iterations produced an error.\n *       // All processing will now stop.\n *       console.log('A file failed to process');\n *     } else {\n *       console.log('All files have been processed successfully');\n *     }\n * });\n */\nfunction eachLimit(coll, iteratee, callback) {\n    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\nvar each = awaitify(eachLimit, 3);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\nvar eachLimit$2 = awaitify(eachLimit$1, 4);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n * in series and therefore the iteratee functions will complete in order.\n\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachSeries(coll, iteratee, callback) {\n    return eachLimit$2(coll, 1, iteratee, callback)\n}\nvar eachSeries$1 = awaitify(eachSeries, 3);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        var sync = true;\n        args.push((...innerArgs) => {\n            if (sync) {\n                setImmediate$1(() => callback(...innerArgs));\n            } else {\n                callback(...innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    };\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.every(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then every file exists\n * });\n */\nfunction every(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n}\nvar every$1 = awaitify(every, 3);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everyLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar everyLimit$1 = awaitify(everyLimit, 4);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everySeries(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar everySeries$1 = awaitify(everySeries, 3);\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            truthValues[index] = !!v;\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            if (err) return iterCb(err);\n            if (v) {\n                results.push({index, value: x});\n            }\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        callback(null, results\n            .sort((a, b) => a.index - b.index)\n            .map(v => v.value));\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    return filter(eachfn, coll, wrapAsync(iteratee), callback);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.filter(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of the existing files\n * });\n */\nfunction filter (coll, iteratee, callback) {\n    return _filter(eachOf$1, coll, iteratee, callback)\n}\nvar filter$1 = awaitify(filter, 3);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterLimit (coll, limit, iteratee, callback) {\n    return _filter(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar filterLimit$1 = awaitify(filterLimit, 4);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterSeries (coll, iteratee, callback) {\n    return _filter(eachOfSeries$1, coll, iteratee, callback)\n}\nvar filterSeries$1 = awaitify(filterSeries, 3);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @returns {Promise} a promise that rejects if an error occurs and an errback\n * is not passed\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        if (err === false) return;\n        task(next);\n    }\n    return next();\n}\nvar forever$1 = awaitify(forever, 2);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupByLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, key) => {\n            if (err) return iterCb(err);\n            return iterCb(err, {key, val});\n        });\n    }, (err, mapResults) => {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var {hasOwnProperty} = Object.prototype;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var {key} = mapResults[i];\n                var {val} = mapResults[i];\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n}\n\nvar groupByLimit$1 = awaitify(groupByLimit, 4);\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\n *     db.findById(userId, function(err, user) {\n *         if (err) return callback(err);\n *         return callback(null, user.age);\n *     });\n * }, function(err, result) {\n *     // result is object containing the userIds grouped by age\n *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\n * });\n */\nfunction groupBy (coll, iteratee, callback) {\n    return groupByLimit$1(coll, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupBySeries (coll, iteratee, callback) {\n    return groupByLimit$1(coll, 1, iteratee, callback)\n}\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfLimit(limit)(obj, (val, key, next) => {\n        _iteratee(val, key, (err, result) => {\n            if (err) return next(err);\n            newObj[key] = result;\n            next(err);\n        });\n    }, err => callback(err, newObj));\n}\n\nvar mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.mapValues({\n *     f1: 'file1',\n *     f2: 'file2',\n *     f3: 'file3'\n * }, function (file, key, callback) {\n *   fs.stat(file, callback);\n * }, function(err, result) {\n *     // result is now a map of stats for each file, e.g.\n *     // {\n *     //     f1: [stats for file1],\n *     //     f2: [stats for file2],\n *     //     f3: [stats for file3]\n *     // }\n * });\n */\nfunction mapValues(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesSeries(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, 1, iteratee, callback)\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * **Note: if the async function errs, the result will not be cached and\n * subsequent calls will call the wrapped function.**\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher = v => v) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams((args, callback) => {\n        var key = hasher(...args);\n        if (key in memo) {\n            setImmediate$1(() => callback(null, ...memo[key]));\n        } else if (key in queues) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn(...args, (err, ...resultArgs) => {\n                // #1465 don't memoize if an error occurred\n                if (!err) {\n                    memo[key] = resultArgs;\n                }\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i](err, ...resultArgs);\n                }\n            });\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nvar _parallel = awaitify((eachfn, tasks, callback) => {\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, (task, key, taskCb) => {\n        wrapAsync(task)((err, ...result) => {\n            if (result.length < 2) {\n                [result] = result;\n            }\n            results[key] = result;\n            taskCb(err);\n        });\n    }, err => callback(err, results));\n}, 3);\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // the results array will equal ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equals to: {one: 1, two: 2}\n * });\n */\nfunction parallel(tasks, callback) {\n    return _parallel(eachOf$1, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n */\nfunction parallelLimit(tasks, limit, callback) {\n    return _parallel(eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Iterable} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n * a promise that rejects if an error occurs.\n * @property {AsyncFunction} unshirtAsync - the same as `q.unshift`, except this returns\n * a promise that rejects if an error occurs.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a function that sets a callback that is\n * called when the number of running workers hits the `concurrency` limit, and\n * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n * returns a promise for the next occurrence.\n * @property {Function} unsaturated - a function that sets a callback that is\n * called when the number of running workers is less than the `concurrency` &\n * `buffer` limits, and further tasks will not be queued. If the callback is\n * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a function that sets a callback that is called\n * when the last item from the `queue` is given to a `worker`. If the callback\n * is omitted, `q.empty()` returns a promise for the next occurrence.\n * @property {Function} drain - a function that sets a callback that is called\n * when the last item from the `queue` has returned from the `worker`. If the\n * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n * @property {Function} error - a function that sets a callback that is called\n * when a task errors. Has the signature `function(error, task)`. If the\n * callback is omitted, `error()` returns a promise that rejects on the next\n * error.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n *\n * @example\n * const q = aync.queue(worker, 2)\n * q.push(item1)\n * q.push(item2)\n * q.push(item3)\n * // queues are iterable, spread into an array to inspect\n * const items = [...q] // [item1, item2, item3]\n * // or use for of\n * for (let item of q) {\n *     console.log(item)\n * }\n *\n * q.drain(() => {\n *     console.log('all done')\n * })\n * // or\n * await q.drain()\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain(function() {\n *     console.log('all items have been processed');\n * });\n * // or await the end\n * await q.drain()\n *\n * // assign an error callback\n * q.error(function(err, task) {\n *     console.error('task experienced an error');\n * });\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * // callback is optional\n * q.push({name: 'bar'});\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nfunction queue$1 (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue((items, cb) => {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n}\n\n// Binary min-heap implementation used for priority queue.\n// Implementation is stable, i.e. push time is considered for equal priorities\nclass Heap {\n    constructor() {\n        this.heap = [];\n        this.pushCount = Number.MIN_SAFE_INTEGER;\n    }\n\n    get length() {\n        return this.heap.length;\n    }\n\n    empty () {\n        this.heap = [];\n        return this;\n    }\n\n    percUp(index) {\n        let p;\n\n        while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n            let t = this.heap[index];\n            this.heap[index] = this.heap[p];\n            this.heap[p] = t;\n\n            index = p;\n        }\n    }\n\n    percDown(index) {\n        let l;\n\n        while ((l=leftChi(index)) < this.heap.length) {\n            if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                l = l+1;\n            }\n\n            if (smaller(this.heap[index], this.heap[l])) {\n                break;\n            }\n\n            let t = this.heap[index];\n            this.heap[index] = this.heap[l];\n            this.heap[l] = t;\n\n            index = l;\n        }\n    }\n\n    push(node) {\n        node.pushCount = ++this.pushCount;\n        this.heap.push(node);\n        this.percUp(this.heap.length-1);\n    }\n\n    unshift(node) {\n        return this.heap.push(node);\n    }\n\n    shift() {\n        let [top] = this.heap;\n\n        this.heap[0] = this.heap[this.heap.length-1];\n        this.heap.pop();\n        this.percDown(0);\n\n        return top;\n    }\n\n    toArray() {\n        return [...this];\n    }\n\n    *[Symbol.iterator] () {\n        for (let i = 0; i < this.heap.length; i++) {\n            yield this.heap[i].data;\n        }\n    }\n\n    remove (testFn) {\n        let j = 0;\n        for (let i = 0; i < this.heap.length; i++) {\n            if (!testFn(this.heap[i])) {\n                this.heap[j] = this.heap[i];\n                j++;\n            }\n        }\n\n        this.heap.splice(j);\n\n        for (let i = parent(this.heap.length-1); i >= 0; i--) {\n            this.percDown(i);\n        }\n\n        return this;\n    }\n}\n\nfunction leftChi(i) {\n    return (i<<1)+1;\n}\n\nfunction parent(i) {\n    return ((i+1)>>1)-1;\n}\n\nfunction smaller(x, y) {\n    if (x.priority !== y.priority) {\n        return x.priority < y.priority;\n    }\n    else {\n        return x.pushCount < y.pushCount;\n    }\n}\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nfunction priorityQueue(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n\n    q._tasks = new Heap();\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority = 0, callback = () => {}) {\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(() => q.drain());\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority,\n                callback\n            };\n\n            q._tasks.push(item);\n        }\n\n        setImmediate$1(q.process);\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n}\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\nvar race$1 = awaitify(race, 2);\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = [...array].reverse();\n    return reduce$1(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push((error, ...cbArgs) => {\n            let retVal = {};\n            if (error) {\n                retVal.error = error;\n            }\n            if (cbArgs.length > 0){\n                var value = cbArgs;\n                if (cbArgs.length <= 1) {\n                    [value] = cbArgs;\n                }\n                retVal.value = value;\n            }\n            reflectCallback(null, retVal);\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (Array.isArray(tasks)) {\n        results = tasks.map(reflect);\n    } else {\n        results = {};\n        Object.keys(tasks).forEach(key => {\n            results[key] = reflect.call(this, tasks[key]);\n        });\n    }\n    return results;\n}\n\nfunction reject(eachfn, arr, _iteratee, callback) {\n    const iteratee = wrapAsync(_iteratee);\n    return _filter(eachfn, arr, (value, cb) => {\n        iteratee(value, (err, v) => {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.reject(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of missing files\n *     createFiles(results);\n * });\n */\nfunction reject$1 (coll, iteratee, callback) {\n    return reject(eachOf$1, coll, iteratee, callback)\n}\nvar reject$2 = awaitify(reject$1, 3);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectLimit (coll, limit, iteratee, callback) {\n    return reject(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar rejectLimit$1 = awaitify(rejectLimit, 4);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectSeries (coll, iteratee, callback) {\n    return reject(eachOfSeries$1, coll, iteratee, callback)\n}\nvar rejectSeries$1 = awaitify(rejectSeries, 3);\n\nfunction constant$1(value) {\n    return function () {\n        return value;\n    }\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @returns {Promise} a promise if no callback provided\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nconst DEFAULT_TIMES = 5;\nconst DEFAULT_INTERVAL = 0;\n\nfunction retry(opts, task, callback) {\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || promiseCallback();\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || promiseCallback();\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task((err, ...args) => {\n            if (err === false) return\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n            } else {\n                callback(err, ...args);\n            }\n        });\n    }\n\n    retryAttempt();\n    return callback[PROMISE_SYMBOL]\n}\n\nfunction parseTimes(acc, t) {\n    if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n\n        acc.intervalFunc = typeof t.interval === 'function' ?\n            t.interval :\n            constant$1(+t.interval || DEFAULT_INTERVAL);\n\n        acc.errorFilter = t.errorFilter;\n    } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n    } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nfunction retryable (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    let arity = (opts && opts.arity) || task.length;\n    if (isAsync(task)) {\n        arity += 1;\n    }\n    var _task = wrapAsync(task);\n    return initialParams((args, callback) => {\n        if (args.length < arity - 1 || callback == null) {\n            args.push(callback);\n            callback = promiseCallback();\n        }\n        function taskFn(cb) {\n            _task(...args, cb);\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n        return callback[PROMISE_SYMBOL]\n    });\n}\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @return {Promise} a promise, if no callback is passed\n * @example\n * async.series([\n *     function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     },\n *     function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // results is now equal to ['one', 'two']\n * });\n *\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback){\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equal to: {one: 1, two: 2}\n * });\n */\nfunction series(tasks, callback) {\n    return _parallel(eachOfSeries$1, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.some(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then at least one of the files exists\n * });\n */\nfunction some(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n}\nvar some$1 = awaitify(some, 3);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someLimit(coll, limit, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar someLimit$1 = awaitify(someLimit, 4);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someSeries(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar someSeries$1 = awaitify(someSeries, 3);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback passed\n * @example\n *\n * async.sortBy(['file1','file2','file3'], function(file, callback) {\n *     fs.stat(file, function(err, stats) {\n *         callback(err, stats.mtime);\n *     });\n * }, function(err, results) {\n *     // results is now the original array of files sorted by\n *     // modified date\n * });\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x);\n * }, function(err,result) {\n *     // result callback\n * });\n *\n * // descending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\n * }, function(err,result) {\n *     // result callback\n * });\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return map$1(coll, (x, iterCb) => {\n        _iteratee(x, (err, criteria) => {\n            if (err) return iterCb(err);\n            iterCb(err, {value: x, criteria});\n        });\n    }, (err, results) => {\n        if (err) return callback(err);\n        callback(null, results.sort(comparator).map(v => v.value));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\nvar sortBy$1 = awaitify(sortBy, 3);\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams((args, callback) => {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push((...cbArgs) => {\n            if (!timedOut) {\n                callback(...cbArgs);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn(...args);\n    });\n}\n\nfunction range(size) {\n    var result = Array(size);\n    while (size--) {\n        result[size] = size;\n    }\n    return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(range(count), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nfunction times (n, iteratee, callback) {\n    return timesLimit(n, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesSeries (n, iteratee, callback) {\n    return timesLimit(n, 1, iteratee, callback)\n}\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in parallel, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.transform([1,2,3], function(acc, item, index, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         acc[index] = item * 2\n *         callback(null)\n *     });\n * }, function(err, result) {\n *     // result is now equal to [2, 4, 6]\n * });\n *\n * @example\n *\n * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\n *     setImmediate(function () {\n *         obj[key] = val * 2;\n *         callback();\n *     })\n * }, function (err, result) {\n *     // result is equal to {a: 2, b: 4, c: 6}\n * })\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = Array.isArray(coll) ? [] : {};\n    }\n    callback = once(callback || promiseCallback());\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf$1(coll, (v, k, cb) => {\n        _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[PROMISE_SYMBOL]\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return eachSeries$1(tasks, (task, taskCb) => {\n        wrapAsync(task)((err, ...args) => {\n            if (err === false) return taskCb(err);\n\n            if (args.length < 2) {\n                [result] = args;\n            } else {\n                result = args;\n            }\n            error = err;\n            taskCb(err ? null : {});\n        });\n    }, () => callback(error, result));\n}\n\nvar tryEach$1 = awaitify(tryEach);\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return (...args) => {\n        return (fn.unmemoized || fn)(...args);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function test(cb) { cb(null, count < 5;) },\n *     function iter(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results = [];\n\n    function next(err, ...rest) {\n        if (err) return callback(err);\n        results = rest;\n        if (err === false) return;\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return _test(check);\n}\nvar whilst$1 = awaitify(whilst, 3);\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * const results = []\n * async.until(function test(page, cb) {\n *     cb(null, page.next == null)\n * }, function iter(next) {\n *     fetchPage(url, (err, body) => {\n *         if (err) return next(err)\n *         results = results.concat(body.objects)\n *         next(err, body)\n *     })\n * }, function done (err) {\n *     // all pages have been fetched\n * })\n */\nfunction until(test, iteratee, callback) {\n    const _test = wrapAsync(test);\n    return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nfunction waterfall (tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        task(...args, onlyOnce(next));\n    }\n\n    function next(err, ...args) {\n        if (err === false) return\n        if (err || taskIndex === tasks.length) {\n            return callback(err, ...args);\n        }\n        nextTask(args);\n    }\n\n    nextTask([]);\n}\n\nvar waterfall$1 = awaitify(waterfall);\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\nvar index = {\n    apply,\n    applyEach: applyEach$1,\n    applyEachSeries,\n    asyncify,\n    auto,\n    autoInject,\n    cargo,\n    cargoQueue: cargo$1,\n    compose,\n    concat: concat$1,\n    concatLimit: concatLimit$1,\n    concatSeries: concatSeries$1,\n    constant,\n    detect: detect$1,\n    detectLimit: detectLimit$1,\n    detectSeries: detectSeries$1,\n    dir,\n    doUntil,\n    doWhilst: doWhilst$1,\n    each,\n    eachLimit: eachLimit$2,\n    eachOf: eachOf$1,\n    eachOfLimit: eachOfLimit$2,\n    eachOfSeries: eachOfSeries$1,\n    eachSeries: eachSeries$1,\n    ensureAsync,\n    every: every$1,\n    everyLimit: everyLimit$1,\n    everySeries: everySeries$1,\n    filter: filter$1,\n    filterLimit: filterLimit$1,\n    filterSeries: filterSeries$1,\n    forever: forever$1,\n    groupBy,\n    groupByLimit: groupByLimit$1,\n    groupBySeries,\n    log,\n    map: map$1,\n    mapLimit: mapLimit$1,\n    mapSeries: mapSeries$1,\n    mapValues,\n    mapValuesLimit: mapValuesLimit$1,\n    mapValuesSeries,\n    memoize,\n    nextTick,\n    parallel,\n    parallelLimit,\n    priorityQueue,\n    queue: queue$1,\n    race: race$1,\n    reduce: reduce$1,\n    reduceRight,\n    reflect,\n    reflectAll,\n    reject: reject$2,\n    rejectLimit: rejectLimit$1,\n    rejectSeries: rejectSeries$1,\n    retry,\n    retryable,\n    seq,\n    series,\n    setImmediate: setImmediate$1,\n    some: some$1,\n    someLimit: someLimit$1,\n    someSeries: someSeries$1,\n    sortBy: sortBy$1,\n    timeout,\n    times,\n    timesLimit,\n    timesSeries,\n    transform,\n    tryEach: tryEach$1,\n    unmemoize,\n    until,\n    waterfall: waterfall$1,\n    whilst: whilst$1,\n\n    // aliases\n    all: every$1,\n    allLimit: everyLimit$1,\n    allSeries: everySeries$1,\n    any: some$1,\n    anyLimit: someLimit$1,\n    anySeries: someSeries$1,\n    find: detect$1,\n    findLimit: detectLimit$1,\n    findSeries: detectSeries$1,\n    flatMap: concat$1,\n    flatMapLimit: concatLimit$1,\n    flatMapSeries: concatSeries$1,\n    forEach: each,\n    forEachSeries: eachSeries$1,\n    forEachLimit: eachLimit$2,\n    forEachOf: eachOf$1,\n    forEachOfSeries: eachOfSeries$1,\n    forEachOfLimit: eachOfLimit$2,\n    inject: reduce$1,\n    foldl: reduce$1,\n    foldr: reduceRight,\n    select: filter$1,\n    selectLimit: filterLimit$1,\n    selectSeries: filterSeries$1,\n    wrapSync: asyncify,\n    during: whilst$1,\n    doDuring: doWhilst$1\n};\n\nexport default index;\nexport { apply, applyEach$1 as applyEach, applyEachSeries, asyncify, auto, autoInject, cargo, cargo$1 as cargoQueue, compose, concat$1 as concat, concatLimit$1 as concatLimit, concatSeries$1 as concatSeries, constant, detect$1 as detect, detectLimit$1 as detectLimit, detectSeries$1 as detectSeries, dir, doUntil, doWhilst$1 as doWhilst, each, eachLimit$2 as eachLimit, eachOf$1 as eachOf, eachOfLimit$2 as eachOfLimit, eachOfSeries$1 as eachOfSeries, eachSeries$1 as eachSeries, ensureAsync, every$1 as every, everyLimit$1 as everyLimit, everySeries$1 as everySeries, filter$1 as filter, filterLimit$1 as filterLimit, filterSeries$1 as filterSeries, forever$1 as forever, groupBy, groupByLimit$1 as groupByLimit, groupBySeries, log, map$1 as map, mapLimit$1 as mapLimit, mapSeries$1 as mapSeries, mapValues, mapValuesLimit$1 as mapValuesLimit, mapValuesSeries, memoize, nextTick, parallel, parallelLimit, priorityQueue, queue$1 as queue, race$1 as race, reduce$1 as reduce, reduceRight, reflect, reflectAll, reject$2 as reject, rejectLimit$1 as rejectLimit, rejectSeries$1 as rejectSeries, retry, retryable, seq, series, setImmediate$1 as setImmediate, some$1 as some, someLimit$1 as someLimit, someSeries$1 as someSeries, sortBy$1 as sortBy, timeout, times, timesLimit, timesSeries, transform, tryEach$1 as tryEach, unmemoize, until, waterfall$1 as waterfall, whilst$1 as whilst, every$1 as all, everyLimit$1 as allLimit, everySeries$1 as allSeries, some$1 as any, someLimit$1 as anyLimit, someSeries$1 as anySeries, detect$1 as find, detectLimit$1 as findLimit, detectSeries$1 as findSeries, concat$1 as flatMap, concatLimit$1 as flatMapLimit, concatSeries$1 as flatMapSeries, each as forEach, eachSeries$1 as forEachSeries, eachLimit$2 as forEachLimit, eachOf$1 as forEachOf, eachOfSeries$1 as forEachOfSeries, eachOfLimit$2 as forEachOfLimit, reduce$1 as inject, reduce$1 as foldl, reduceRight as foldr, filter$1 as select, filterLimit$1 as selectLimit, filterSeries$1 as selectSeries, asyncify as wrapSync, whilst$1 as during, doWhilst$1 as doDuring };\n","/*! MIT License © Sindre Sorhus */\n\nconst globals = {};\n\n{\n\tconst getGlobal = property => {\n\t\tlet parent;\n\n\t\t/* istanbul ignore next */\n\t\tif (typeof self !== 'undefined' && self && property in self) {\n\t\t\tparent = self;\n\t\t}\n\n\t\t/* istanbul ignore next */\n\t\tif (typeof window !== 'undefined' && window && property in window) {\n\t\t\tparent = window;\n\t\t}\n\n\t\tif (typeof global !== 'undefined' && global && property in global) {\n\t\t\tparent = global;\n\t\t}\n\n\t\t/* istanbul ignore next */\n\t\tif (typeof globalThis !== 'undefined' && globalThis) {\n\t\t\tparent = globalThis;\n\t\t}\n\n\t\tif (typeof parent === 'undefined') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst globalProperty = parent[property];\n\n\t\tif (typeof globalProperty === 'function') {\n\t\t\treturn globalProperty.bind(parent);\n\t\t}\n\n\t\treturn globalProperty;\n\t};\n\n\tconst globalProperties = [\n\t\t'document',\n\t\t'Headers',\n\t\t'Request',\n\t\t'Response',\n\t\t'ReadableStream',\n\t\t'fetch',\n\t\t'AbortController',\n\t\t'FormData'\n\t];\n\n\tconst props = {};\n\tfor (const property of globalProperties) {\n\t\tprops[property] = {\n\t\t\tget() {\n\t\t\t\treturn getGlobal(property);\n\t\t\t}\n\t\t};\n\t}\n\n\tObject.defineProperties(globals, props);\n}\n\nconst isObject = value => value !== null && typeof value === 'object';\nconst supportsAbortController = typeof globals.AbortController === 'function';\nconst supportsStreams = typeof globals.ReadableStream === 'function';\nconst supportsFormData = typeof globals.FormData === 'function';\n\nconst deepMerge = (...sources) => {\n\tlet returnValue = {};\n\n\tfor (const source of sources) {\n\t\tif (Array.isArray(source)) {\n\t\t\tif (!(Array.isArray(returnValue))) {\n\t\t\t\treturnValue = [];\n\t\t\t}\n\n\t\t\treturnValue = [...returnValue, ...source];\n\t\t} else if (isObject(source)) {\n\t\t\tfor (let [key, value] of Object.entries(source)) {\n\t\t\t\tif (isObject(value) && Reflect.has(returnValue, key)) {\n\t\t\t\t\tvalue = deepMerge(returnValue[key], value);\n\t\t\t\t}\n\n\t\t\t\treturnValue = {...returnValue, [key]: value};\n\t\t\t}\n\t\t}\n\t}\n\n\treturn returnValue;\n};\n\nconst requestMethods = [\n\t'get',\n\t'post',\n\t'put',\n\t'patch',\n\t'head',\n\t'delete'\n];\n\nconst responseTypes = {\n\tjson: 'application/json',\n\ttext: 'text/*',\n\tformData: 'multipart/form-data',\n\tarrayBuffer: '*/*',\n\tblob: '*/*'\n};\n\nconst retryMethods = new Set([\n\t'get',\n\t'put',\n\t'head',\n\t'delete',\n\t'options',\n\t'trace'\n]);\n\nconst retryStatusCodes = new Set([\n\t408,\n\t413,\n\t429,\n\t500,\n\t502,\n\t503,\n\t504\n]);\n\nconst retryAfterStatusCodes = new Set([\n\t413,\n\t429,\n\t503\n]);\n\nclass HTTPError extends Error {\n\tconstructor(response) {\n\t\tsuper(response.statusText);\n\t\tthis.name = 'HTTPError';\n\t\tthis.response = response;\n\t}\n}\n\nclass TimeoutError extends Error {\n\tconstructor() {\n\t\tsuper('Request timed out');\n\t\tthis.name = 'TimeoutError';\n\t}\n}\n\nconst safeTimeout = (resolve, reject, ms) => {\n\tif (ms > 2147483647) { // The maximum value of a 32bit int (see #117)\n\t\treject(new RangeError('The `timeout` option cannot be greater than 2147483647'));\n\t}\n\n\treturn setTimeout(resolve, ms);\n};\n\nconst delay = ms => new Promise((resolve, reject) => safeTimeout(resolve, reject, ms));\n\n// `Promise.race()` workaround (#91)\nconst timeout = (promise, ms, abortController) =>\n\tnew Promise((resolve, reject) => {\n\t\tconst timeoutID = safeTimeout(() => {\n\t\t\tif (supportsAbortController) {\n\t\t\t\tabortController.abort();\n\t\t\t}\n\n\t\t\treject(new TimeoutError());\n\t\t}, reject, ms);\n\n\t\t/* eslint-disable promise/prefer-await-to-then */\n\t\tpromise\n\t\t\t.then(resolve)\n\t\t\t.catch(reject)\n\t\t\t.then(() => {\n\t\t\t\tclearTimeout(timeoutID);\n\t\t\t});\n\t\t/* eslint-enable promise/prefer-await-to-then */\n\t});\n\nconst normalizeRequestMethod = input => requestMethods.includes(input) ? input.toUpperCase() : input;\n\nconst defaultRetryOptions = {\n\tlimit: 2,\n\tmethods: retryMethods,\n\tstatusCodes: retryStatusCodes,\n\tafterStatusCodes: retryAfterStatusCodes\n};\n\nconst normalizeRetryOptions = retry => {\n\tif (typeof retry === 'number') {\n\t\treturn {\n\t\t\t...defaultRetryOptions,\n\t\t\tlimit: retry\n\t\t};\n\t}\n\n\tif (retry.methods && !Array.isArray(retry.methods)) {\n\t\tthrow new Error('retry.methods must be an array');\n\t}\n\n\tif (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n\t\tthrow new Error('retry.statusCodes must be an array');\n\t}\n\n\treturn {\n\t\t...defaultRetryOptions,\n\t\t...retry,\n\t\tmethods: retry.methods ? new Set(retry.methods) : defaultRetryOptions.methods,\n\t\tstatusCodes: retry.statusCodes ? new Set(retry.statusCodes) : defaultRetryOptions.statusCodes,\n\t\tafterStatusCodes: retryAfterStatusCodes\n\t};\n};\n\nclass Ky {\n\tconstructor(input, {\n\t\ttimeout = 10000,\n\t\thooks,\n\t\tthrowHttpErrors = true,\n\t\tsearchParams,\n\t\tjson,\n\t\tretry = {},\n\t\t...otherOptions\n\t}) {\n\t\tthis._retryCount = 0;\n\n\t\tthis._options = {\n\t\t\tmethod: 'get',\n\t\t\tcredentials: 'same-origin', // TODO: This can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n\t\t\tretry: normalizeRetryOptions(retry),\n\t\t\t...otherOptions\n\t\t};\n\n\t\tif (input instanceof globals.Request) {\n\t\t\tthis._input = input;\n\n\t\t\t// `ky` options have precedence over `Request` options\n\t\t\tthis._options = {\n\t\t\t\t...this._options,\n\t\t\t\tmethod: otherOptions.method || input.method,\n\t\t\t\theaders: otherOptions.headers || input.headers,\n\t\t\t\tbody: otherOptions.body || input.body,\n\t\t\t\tcredentials: otherOptions.credentials || input.credentials\n\t\t\t};\n\t\t} else if (!(input instanceof URL) && typeof input !== 'string') {\n\t\t\tthrow new TypeError('`input` must be a string, URL, or Request');\n\t\t} else {\n\t\t\tthis._input = String(input || '');\n\t\t\tthis._options.prefixUrl = String(this._options.prefixUrl || '');\n\n\t\t\tif (this._options.prefixUrl && this._input.startsWith('/')) {\n\t\t\t\tthrow new Error('`input` must not begin with a slash when using `prefixUrl`');\n\t\t\t}\n\n\t\t\tif (this._options.prefixUrl && !this._options.prefixUrl.endsWith('/')) {\n\t\t\t\tthis._options.prefixUrl += '/';\n\t\t\t}\n\n\t\t\tthis._input = this._options.prefixUrl + this._input;\n\n\t\t\tif (searchParams) {\n\t\t\t\tconst url = new URL(this._input, globals.document && globals.document.baseURI);\n\t\t\t\tif (typeof searchParams === 'string' || (URLSearchParams && searchParams instanceof URLSearchParams)) {\n\t\t\t\t\turl.search = searchParams;\n\t\t\t\t} else if (Object.values(searchParams).every(param => typeof param === 'number' || typeof param === 'string')) {\n\t\t\t\t\turl.search = new URLSearchParams(searchParams).toString();\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('The `searchParams` option must be either a string, `URLSearchParams` instance or an object with string and number values');\n\t\t\t\t}\n\n\t\t\t\tthis._input = url.toString();\n\t\t\t}\n\t\t}\n\n\t\tif (supportsAbortController) {\n\t\t\tthis.abortController = new globals.AbortController();\n\t\t\tif (this._options.signal) {\n\t\t\t\tthis._options.signal.addEventListener('abort', () => {\n\t\t\t\t\tthis.abortController.abort();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._options.signal = this.abortController.signal;\n\t\t}\n\n\t\tthis._options.method = normalizeRequestMethod(this._options.method);\n\n\t\tthis._timeout = timeout;\n\t\tthis._hooks = deepMerge({\n\t\t\tbeforeRequest: [],\n\t\t\tbeforeRetry: [],\n\t\t\tafterResponse: []\n\t\t}, hooks);\n\t\tthis._throwHttpErrors = throwHttpErrors;\n\n\t\tconst headers = new globals.Headers(this._options.headers || {});\n\n\t\tif (((supportsFormData && this._options.body instanceof globals.FormData) || this._options.body instanceof URLSearchParams) && headers.has('content-type')) {\n\t\t\tthrow new Error(`The \\`content-type\\` header cannot be used with a ${this._options.body.constructor.name} body. It will be set automatically.`);\n\t\t}\n\n\t\tif (json) {\n\t\t\tif (this._options.body) {\n\t\t\t\tthrow new Error('The `json` option cannot be used with the `body` option');\n\t\t\t}\n\n\t\t\theaders.set('content-type', 'application/json');\n\t\t\tthis._options.body = JSON.stringify(json);\n\t\t}\n\n\t\tthis._options.headers = headers;\n\n\t\tconst fn = async () => {\n\t\t\tawait delay(1);\n\t\t\tlet response = await this._fetch();\n\n\t\t\tfor (const hook of this._hooks.afterResponse) {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tconst modifiedResponse = await hook(\n\t\t\t\t\tthis._input,\n\t\t\t\t\tthis._options,\n\t\t\t\t\tresponse.clone()\n\t\t\t\t);\n\n\t\t\t\tif (modifiedResponse instanceof globals.Response) {\n\t\t\t\t\tresponse = modifiedResponse;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!response.ok && this._throwHttpErrors) {\n\t\t\t\tthrow new HTTPError(response);\n\t\t\t}\n\n\t\t\t// If `onDownloadProgress` is passed, it uses the stream API internally\n\t\t\t/* istanbul ignore next */\n\t\t\tif (this._options.onDownloadProgress) {\n\t\t\t\tif (typeof this._options.onDownloadProgress !== 'function') {\n\t\t\t\t\tthrow new TypeError('The `onDownloadProgress` option must be a function');\n\t\t\t\t}\n\n\t\t\t\tif (!supportsStreams) {\n\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n\t\t\t\t}\n\n\t\t\t\treturn this._stream(response.clone(), this._options.onDownloadProgress);\n\t\t\t}\n\n\t\t\treturn response;\n\t\t};\n\n\t\tconst isRetriableMethod = this._options.retry.methods.has(this._options.method.toLowerCase());\n\t\tconst result = isRetriableMethod ? this._retry(fn) : fn();\n\n\t\tfor (const [type, mimeType] of Object.entries(responseTypes)) {\n\t\t\tresult[type] = async () => {\n\t\t\t\theaders.set('accept', mimeType);\n\t\t\t\treturn (await result).clone()[type]();\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t_calculateRetryDelay(error) {\n\t\tthis._retryCount++;\n\n\t\tif (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {\n\t\t\tif (error instanceof HTTPError) {\n\t\t\t\tif (!this._options.retry.statusCodes.has(error.response.status)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tconst retryAfter = error.response.headers.get('Retry-After');\n\t\t\t\tif (retryAfter && this._options.retry.afterStatusCodes.has(error.response.status)) {\n\t\t\t\t\tlet after = Number(retryAfter);\n\t\t\t\t\tif (Number.isNaN(after)) {\n\t\t\t\t\t\tafter = Date.parse(retryAfter) - Date.now();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tafter *= 1000;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn after;\n\t\t\t\t}\n\n\t\t\t\tif (error.response.status === 413) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst BACKOFF_FACTOR = 0.3;\n\t\t\treturn BACKOFF_FACTOR * (2 ** (this._retryCount - 1)) * 1000;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tasync _retry(fn) {\n\t\ttry {\n\t\t\treturn await fn();\n\t\t} catch (error) {\n\t\t\tconst ms = this._calculateRetryDelay(error);\n\t\t\tif (ms !== 0 && this._retryCount > 0) {\n\t\t\t\tawait delay(ms);\n\n\t\t\t\tfor (const hook of this._hooks.beforeRetry) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tawait hook(\n\t\t\t\t\t\tthis._input,\n\t\t\t\t\t\tthis._options,\n\t\t\t\t\t\terror,\n\t\t\t\t\t\tthis._retryCount,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn this._retry(fn);\n\t\t\t}\n\n\t\t\tif (this._throwHttpErrors) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync _fetch() {\n\t\tfor (const hook of this._hooks.beforeRequest) {\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tconst result = await hook(this._input, this._options);\n\n\t\t\tif (result instanceof Response) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\tif (this._timeout === false) {\n\t\t\treturn globals.fetch(this._input, this._options);\n\t\t}\n\n\t\treturn timeout(globals.fetch(this._input, this._options), this._timeout, this.abortController);\n\t}\n\n\t/* istanbul ignore next */\n\t_stream(response, onDownloadProgress) {\n\t\tconst totalBytes = Number(response.headers.get('content-length')) || 0;\n\t\tlet transferredBytes = 0;\n\n\t\treturn new globals.Response(\n\t\t\tnew globals.ReadableStream({\n\t\t\t\tstart(controller) {\n\t\t\t\t\tconst reader = response.body.getReader();\n\n\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\tonDownloadProgress({percent: 0, transferredBytes: 0, totalBytes}, new Uint8Array());\n\t\t\t\t\t}\n\n\t\t\t\t\tasync function read() {\n\t\t\t\t\t\tconst {done, value} = await reader.read();\n\t\t\t\t\t\tif (done) {\n\t\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\t\ttransferredBytes += value.byteLength;\n\t\t\t\t\t\t\tconst percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n\t\t\t\t\t\t\tonDownloadProgress({percent, transferredBytes, totalBytes}, value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontroller.enqueue(value);\n\t\t\t\t\t\tread();\n\t\t\t\t\t}\n\n\t\t\t\t\tread();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n\nconst validateAndMerge = (...sources) => {\n\tfor (const source of sources) {\n\t\tif ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n\t\t\tthrow new TypeError('The `options` argument must be an object');\n\t\t}\n\t}\n\n\treturn deepMerge({}, ...sources);\n};\n\nconst createInstance = defaults => {\n\tconst ky = (input, options) => new Ky(input, validateAndMerge(defaults, options));\n\n\tfor (const method of requestMethods) {\n\t\tky[method] = (input, options) => new Ky(input, validateAndMerge(defaults, options, {method}));\n\t}\n\n\tky.create = newDefaults => createInstance(validateAndMerge(newDefaults));\n\tky.extend = newDefaults => createInstance(validateAndMerge(defaults, newDefaults));\n\n\treturn ky;\n};\n\nexport default createInstance();\n\nexport {\n\tHTTPError,\n\tTimeoutError\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import { Repository, Connection, ObjectType } from \"typeorm\";\nimport { inject, autoInjectable, singleton } from \"tsyringe\";\nimport { Observable } from 'rxjs';\nimport { IRepository } from './interfaces/IRepository';\n\n@autoInjectable()\n@singleton()\nexport class Emporium<T> implements IRepository<T> {\n    private readonly _connection: () => Connection;\n    private readonly _model: ObjectType<T>;\n\n    private _getRepo(): Promise<IRepository<T>> {\n        if (!this.repo || !this._connection) {\n            return Promise.reject(\"No Repo injected\");\n        }\n\n        return Promise.resolve(this.repo);\n    }\n    private get _entityRepo(): Repository<T> {\n        return this._connection().getRepository(this._model);\n    };\n\n    constructor(\n        connection: () => Connection,\n        model: ObjectType<T>,\n        @inject(\"IRepository\") private repo?: IRepository<T>\n    ) {\n        this._connection = connection;\n        this._model = model;\n    }\n\n    save(entity: T): Promise<T> {\n        return this._getRepo()\n            .then(repo => repo\n                .save(entity)\n                .then(result => this._entityRepo.save(entity)));\n    }\n\n    find(): Promise<T[]> {\n        return this._getRepo()\n            .then(repo => repo\n                .find()\n                .then((result => this._entityRepo.find())));\n    }\n\n    stream = (): Promise<Observable<T>> =>\n        this._getRepo().then(repo => repo.stream());\n}"],"sourceRoot":""}